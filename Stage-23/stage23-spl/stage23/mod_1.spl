//PROCESS_MANAGER MODULE

alias functionNum R1;
alias currentPID R2;

//GET PCB ENTRY
if (functionNum == 1)then
    multipush(R1,R2,R3);
    
    R1 = 0;
    while ( R1 != MAX_PROC_NUM && [PROCESS_TABLE + 16*R1 + 4] != TERMINATED)do
        R1 = R1 + 1;
    endwhile;
    if ( R1 == MAX_PROC_NUM )then
        R0 = -1;
    else
        R0 = R1;
        [PROCESS_TABLE + 16*R1 + 1]  = R1;
        [PROCESS_TABLE + 16*R1 + 4]  = ALLOCATED;
        [PROCESS_TABLE + 16*R1 + 14] = PAGE_TABLE_BASE + 20 * R1;
        [PROCESS_TABLE + 16*R1 + 15] = 10;
    endif;

    multipop(R1,R2,R3);

    return;
endif;

//FREE USER AREA PAGE 
if (functionNum == 2)then

    multipush(R0,R1,R2,R3);

    alias resourceTableBase R1;
    resourceTableBase = [PROCESS_TABLE + (currentPID * 16) + 11]*512 + 496;
    
    alias i R4;
    i = 0;
    while(i<8)do
        if ( [resourceTableBase + 2*i] == 1 )then
            multipush(R0,R1,R2,R3,R4);
            R1 = 7;
            R2 = [resourceTableBase + 2*i + 1];
            R3 = [SYSTEM_STATUS_TABLE+1];
            call RESOURCE_MANAGER;
            multipop(R0,R1,R2,R3,R4);
        endif;
        i = i + 1;
    endwhile;

    R1 = 2;
    R2 = [PROCESS_TABLE + (currentPID * 16) + 11];
    call MEMORY_MANAGER;
    multipop(R0,R1,R2,R3);



    return;
endif;



//EXIT function
if (functionNum == 3)then
    multipush(R0,R1,R2,R3);
    R1 = 4;
    R2 = currentPID;
    call PROCESS_MANAGER;

    R1 = 2;
    R2 = currentPID;
    call PROCESS_MANAGER;
    multipop(R0,R1,R2,R3);
    [PROCESS_TABLE + (currentPID * 16) + 4] = TERMINATED;

    
    multipush(R1);
    if ( [PROCESS_TABLE + (currentPID * 16) + 9] != 9 )then
        alias ind R1;
        ind = 0;
        while (ind < MAX_PROC_NUM)do
            if ( [PROCESS_TABLE + ( ind * 16) + 4]== WAIT_PROCESS && [PROCESS_TABLE + ( ind * 16) + 5 ] == currentPID)then
                [PROCESS_TABLE + ( ind * 16) + 4] = READY;
            endif;
            if ( [PROCESS_TABLE + ( ind * 16) + 2] == currentPID )then
                [PROCESS_TABLE + ( ind * 16) + 2] = -1;
            endif;


            ind = ind + 1;
        endwhile;
    endif; 
    multipop(R1);

    return;
endif;




//Free Page Table
if (functionNum == 4)then
    multipush(R0,R1,R2,R3);
    PTBR = [PROCESS_TABLE + (currentPID * 16) + 14];
    PTLR = [PROCESS_TABLE + (currentPID * 16) + 15];
    //Library
    [PTBR+0] = -1;
    [PTBR+1] = "0000";
    [PTBR+2] = -1;
    [PTBR+3] = "0000";

    //Calling Release Page
    R3 = 4;
    while( R3 != 20)do
        if ( [PTBR+R3] != -1 )then
            multipush(R0,R1,R2,R3);
            R1 = 2;
            R2 = [PTBR + R3];
            call MEMORY_MANAGER;
            multipop(R0,R1,R2,R3);

            [PTBR+R3] = -1;
            [PTBR+R3+1] = "0000";
        endif;
        
        R3 = R3 + 2;
    endwhile;

    //Reseting Disk Map Table
    R3 = 0;
    while ( R3 < 10 )do
        if (R3 == 2 || R2 == 3 || R3 == 8 || R3 == 9)then
            if ( [DISK_MAP_TABLE + R3 ] != -1  )then
                multipush(R0,R1,R2,R3,R4,R5,R6,R7);
                R1 = 4;
                R2 = [DISK_MAP_TABLE + R3 ];
                R3 = [SYSTEM_STATUS_TABLE + 1];
                call MEMORY_MANAGER;
                multipop(R0,R1,R2,R3,R4,R5,R6,R7);
            endif;
            [DISK_MAP_TABLE + R3 ] = -1;
        endif;
        R3 = R3 + 1;
    endwhile;
    multipop(R0,R1,R2,R3);    
    return;
endif;