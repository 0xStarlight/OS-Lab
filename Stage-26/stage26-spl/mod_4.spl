alias func_num R1;
alias currPID R2;


//Disk store
if(func_num==1)then
	alias pgnum R3;
	alias blocknum R4;
	
	//acquire disk
	multipush(R1,R2,R3,R4);
	R1=3;
	R2=currPID;
	call RESOURCE_MANAGER;
	multipop(R1,R2,R3,R4);
	
	//update disk status table
	[DISK_STATUS_TABLE+1]=1;
	[DISK_STATUS_TABLE+2]=pgnum;
	[DISK_STATUS_TABLE+3]=blocknum;
	
	store(pgnum,blocknum);
	
	[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+4]=WAIT_DISK;
	
	multipush(R1,R2,R3,R4);
	call SCHEDULER;
	multipop(R1,R2,R3,R4);
endif;
	
//Disk Load
if(func_num==2)then
	multipush(R1,R2,R3,R4);
	
	//to call acquire disk(func_num=3)
	R1=3;
	R2=[SYSTEM_STATUS_TABLE + 1];
	call RESOURCE_MANAGER;
	multipop(R1,R2,R3,R4);
	[DISK_STATUS_TABLE+1]=0;
	//R3=page num
	[DISK_STATUS_TABLE+2]=R3;
	//R4=block num
	[DISK_STATUS_TABLE+3]=R4;
	load(R3,R4);
	[PROCESS_TABLE+currPID*16+4]=WAIT_DISK;
	multipush(R1,R2,R3,R4);
	call SCHEDULER;
	multipop(R1,R2,R3,R4);
endif;

//Terminal Write
if(func_num==3)then
	multipush(R1,R2,R3);
	
	//to call acquire terminal(func_num=8)
	R1=8;
	R2=[SYSTEM_STATUS_TABLE + 1];
	call RESOURCE_MANAGER;
	
	multipop(R1,R2,R3);
	print R3;
	
	multipush(R1,R2,R3);
	
	//to call release terminal(func_num=9)
	R1=9;
	R2=[SYSTEM_STATUS_TABLE + 1];
	call RESOURCE_MANAGER;
	
	//can save retval which is in R0 if needed.
	
	multipop(R1,R2,R3);
endif;

//Terminal Read
if(func_num==4)then
	multipush(R1,R2,R3);
	
	//to call acquire terminal(func_num=8)
	R1=8;
	R2=[SYSTEM_STATUS_TABLE + 1];
	call RESOURCE_MANAGER;
	
	multipop(R1,R2,R3);
	read;
	
	[PROCESS_TABLE +[SYSTEM_STATUS_TABLE+1]*16 +4]=WAIT_TERMINAL;
	multipush(R1,R2,R3);
	
	call SCHEDULER;
	
	multipop(R1,R2,R3);
	alias deb R4;
	
	[[PTBR + 2*(R3/512)]*512 + (R3%512)]=[PROCESS_TABLE +[SYSTEM_STATUS_TABLE+1]*16+8];
	
endif;

return;
	