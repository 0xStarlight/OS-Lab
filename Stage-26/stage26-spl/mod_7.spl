//MOD_0
loadi(40,53);
loadi(41,54);

//MOD_1
loadi(42,55);
loadi(43,56);

//MOD_2
loadi(44,57);
loadi(45,58);

//MOD_3
loadi(46,59);
loadi(47,60);

//MOD_4
loadi(48,61);
loadi(49,62);

//INODE TABLE
loadi (59, 3);
loadi (60, 4);

//DISK FREE LIST
loadi(61,2);

//ROOT FILE
loadi(62,5);

//shell
loadi(67,9);
loadi(68,10);

//lib
loadi(63,13);
loadi(64,14);

//scheduler
loadi(50,63);
loadi(51,64);

//init
loadi(65,7);
loadi(66,8);
alias cnt R7;
cnt=0;

while(cnt<=26)do
	loadi(10+cnt,23+cnt);
	loadi(11+cnt,24+cnt);
	cnt=cnt+2;
endwhile;



//console int handler
loadi(8,21);
loadi(9,22);

//disk int handler
loadi(6,19);
loadi(7,20);

//exception
loadi(2,15);
loadi(3,16);

//timer
loadi(4,17);
loadi(5,18);

//FOR INIT
//pid
[PROCESS_TABLE+(16+1)]=1;

//userareapgnum
//Setting user area pg num
[PROCESS_TABLE + (16+11)]=77;
//UPTR FOR INIT
[PROCESS_TABLE + (16+13)]=8*512;

//KPTR FOR INIT
[PROCESS_TABLE+(16+12)]=0;

[PROCESS_TABLE+(16+14)]=(PAGE_TABLE_BASE+20);
[PROCESS_TABLE+(16+15)]=10;
[PROCESS_TABLE+(16+4)]=CREATED;

//userid
[PROCESS_TABLE+(16+3)]=1;

//init
PTBR=PAGE_TABLE_BASE+20;
PTLR=10;

//lib
[PTBR+0]=63;
[PTBR+1]="0100";
[PTBR+2]=64;
[PTBR+3]="0100";

//heap
[PTBR+4]=-1;
[PTBR+5]="0000";
[PTBR+6]=-1;
[PTBR+7]="0000";

//Code
[PTBR+8]=65;
[PTBR+9]="0100";
[PTBR+10]=-1;
[PTBR+11]="0000";
[PTBR+12]=-1;
[PTBR+13]="0000";
[PTBR+14]=-1;
[PTBR+15]="0000";

//stack
[PTBR+16]=66;
[PTBR+17]="0110";
[PTBR+18]=-1;
[PTBR+19]="0000";

[66 * 512] = [65*512 + 1];


//initializing the per process resource table
alias counter R9;
counter=496;
while(counter<512)do
	[(77*512)+counter]=-1;
	counter=counter+1;
endwhile;


//FOR SHELL
//pid
[PROCESS_TABLE+(16*2+1)]=2;

//userareapgnum
//Setting user area pg num
[PROCESS_TABLE + (16*2+11)]=80;
//UPTR FOR INIT
[PROCESS_TABLE + (16*2+13)]=8*512;

//KPTR FOR INIT
[PROCESS_TABLE+(16*2+12)]=0;

[PROCESS_TABLE+(16*2+14)]=(PAGE_TABLE_BASE+40);
[PROCESS_TABLE+(16*2+15)]=10;
[PROCESS_TABLE+(16*2+4)]=TERMINATED;

//userid ??????what to keep here??????
[PROCESS_TABLE+(16*2+3)]=0;

//PID and PPID
[PROCESS_TABLE+2*16+1]=2;
[PROCESS_TABLE+2*16+2]=1;


//init
PTBR=PAGE_TABLE_BASE+40;
PTLR=10;

//lib

[PTBR+0]=63;
[PTBR+1]="0100";
[PTBR+2]=64;
[PTBR+3]="0100";

//heap

[PTBR+4]=-1;
[PTBR+5]="0000";
[PTBR+6]=-1;
[PTBR+7]="0000";

//Code
[PTBR+8]=67;
[PTBR+9]="0100";
[PTBR+10]=68;
[PTBR+11]="0100";
[PTBR+12]=-1;
[PTBR+13]="0000";
[PTBR+14]=-1;
[PTBR+15]="0000";

//stack
[PTBR+16]=78;
[PTBR+17]="0110";
[PTBR+18]=79;
[PTBR+19]="0110";

[78 * 512] = [67*512 + 1];

alias conter R3;
conter=0;

while(conter<4)do
	[DISK_MAP_TABLE+2*10+conter]=-1;
	conter=conter+1;
endwhile;

[DISK_MAP_TABLE+2*10+4]=67;
[DISK_MAP_TABLE+2*10+5]=68;
conter=6;
while(conter<10)do
	[DISK_MAP_TABLE+2*10+conter]=-1;
	conter=conter+1;
endwhile;

//other process table entries,state=terminated
counter=32;
while(counter<=240)do
	[PROCESS_TABLE+(counter+4)]=TERMINATED;
	counter=counter+16;
endwhile;


//set status=0 in terminal status table
[TERMINAL_STATUS_TABLE]=0;

//initializing the mem free list
alias count R0;
count=0;
while(count<=80)do
	[MEMORY_FREE_LIST+count]=1;
	count=count+1;
endwhile;

while(count<128)do
	[MEMORY_FREE_LIST+count]=0;
	count=count+1;
endwhile;

[SYSTEM_STATUS_TABLE+3]=0;
[SYSTEM_STATUS_TABLE+2]=47;
[DISK_STATUS_TABLE]=0;

count=0;
while(count<32)do
	[SEMAPHORE_TABLE+count*4+0]=-1;
	[SEMAPHORE_TABLE+count*4+1]=0;
	count=count+1;
endwhile;

count=0;
while(count<MAX_FILE_NUM)do
	[FILE_STATUS_TABLE+count*4+0]=-1;
	[FILE_STATUS_TABLE+count*4+1]=-1;
	count=count+1;
endwhile;

count=0;
while(count<MAX_BUFFER)do
	[BUFFER_TABLE+4*count+0]=-1;
	[BUFFER_TABLE+4*count+1]=0;
	[BUFFER_TABLE+4*count+2]=-1;
	count=count+1;
endwhile;

count=0;
while(count<MAX_OPENFILE_NUM)do
	[OPEN_FILE_TABLE+4*count+0]=-1;
	[OPEN_FILE_TABLE+4*count+1]=0;
	count=count+1;
endwhile;

return;

