alias currPID R9;
alias userSP R10;


userSP = SP;
currPID = [SYSTEM_STATUS_TABLE+1];

alias process_table R12;
process_table = PROCESS_TABLE + (currPID * 16);

//Work
//UPTR set to Stack Ptr
[process_table + 13] = SP;

//UA Page No.
SP = [process_table + 11] * 512 - 1;

//Accessing physical sysCallNo location

//To find sysCallNo 
alias sysCallNo R4;
sysCallNo=[([PTBR + 2 * ((userSP - 5)/ 512)] * 512) + (userSP - 5) % 512];

//Return address
alias return_addr R11;
return_addr = ([PTBR + 2 * ((userSP - 1)/ 512)] * 512) + (userSP - 1) % 512;


// print sysCallNo;

//Setting Mode Flag
[process_table + 9] = sysCallNo;
//temp: R1, imp : R4,R9,R10,R11,R12

//Logout
if ( sysCallNo == 28 )then

    //If current PID is not Shell Process
    if ( currPID != 2 )then
        //Return -1
        [return_addr] = -1;

        // Reset Mode Flag
        [process_table + 9] = 0;

        //Reset User Stack
        SP = [process_table + 13];
        ireturn;
    endif;


    //Kill All
    multipush(R4,R9,R10,R11,R12);
    R1 = 5;
    R2 = currPID;
    call PROCESS_MANAGER;
    multipop(R4,R9,R10,R11,R12);



    [process_table + 4] = TERMINATED;



    //First entry of Shell Stack
    [[PTBR + 16] * 512] = [67 * 512 + 1];
    [process_table + 13] = 8*512;

    //Login Process Ready to Execute
    [ PROCESS_TABLE + 16 * 1 + 4] = READY;

    //Setting User to zero
    [ SYSTEM_STATUS_TABLE ] = 0;


    multipush(R4,R9,R10,R11,R12);
    call SCHEDULER;
    multipop(R4,R9,R10,R11,R12);

    [ process_table + 9 ] = 0;
    SP = [process_table + 13];
    ireturn;

endif;
