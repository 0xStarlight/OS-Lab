//load exception handler
loadi(2, 15);
loadi(3, 16);

//load the timer interupt routine
loadi(4, 17);
loadi(5, 18);

//load disk interrupt
loadi(6, 19);
loadi(7, 20);

//load console interrupt
loadi(8,21);
loadi(9,22);

//load INT 6
loadi(14,27);
loadi(15,28);

//load int7
loadi(16,29);
loadi(17,30);

//load int8
loadi(18,31);
loadi(19,32);

//load int 9
loadi(20,33);
loadi(21,34);

//load int10 
loadi(22,35);
loadi(23,36);

// load int11
loadi(24,37);
loadi(25,38);

// load int15
loadi(32,45);
loadi(33,46);

//module 0
loadi(40, 53);
loadi(41, 54);

// load  module 1, 
loadi(42, 55);
loadi(43, 56);

// load module 2 
loadi(44, 57 );
loadi(45, 58 );

//module 4
loadi(48, 61);
loadi(49, 62);

//load inode table
loadi(59,3);
loadi(60,4);

//scheduler - mod5
loadi(50,63);
loadi(51,64);

//load disk map table
loadi(61, 2);

//load library code form disk to memory
loadi(63,13);
loadi(64,14);

//load init program
loadi(65,7);
loadi(66,8);





//---------------------------------------------------->init program<--------------------------------------------

PTBR = PAGE_TABLE_BASE + 20;
PTLR = 10;

//library - page 0 and 1
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//heap - page 2 and 3
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

//page 4 and 5 - code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";

[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";


//page 8 and 9- stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";


//PROCESS TABLE FOR INIT PID =1
[PROCESS_TABLE + 16 + 1] = 1;
[PROCESS_TABLE + 16 + 4] = CREATED;
[PROCESS_TABLE + 16 + 11] = 80;   //UAreaPgNo.
[PROCESS_TABLE + 16 + 12] = 0;    //KPTR
[PROCESS_TABLE + 16 + 13] = 8*512;    //UPTR : LOGICAL ADDRESS OF userSP
[PROCESS_TABLE + 16 + 14] = PTBR;
[PROCESS_TABLE + 16 + 15] = PTLR;


[76*512] = [65 * 512 + 1];


//initialise memory free list
alias i R1;
i = 0;
while(i<83) do
  [MEMORY_FREE_LIST + i] = 1;
  [SYSTEM_STATUS_TABLE+3] = [SYSTEM_STATUS_TABLE+3]  - 1;
  i = i + 1;
endwhile;

while(i<128) do
  [MEMORY_FREE_LIST + i] = 0;
  i = i + 1;
endwhile;

[DISK_STATUS_TABLE] = 0;
[TERMINAL_STATUS_TABLE] = 0;
[SYSTEM_STATUS_TABLE + 3] = 0;
[SYSTEM_STATUS_TABLE + 2] = 45;

alias perProcessTableEntry R1;
alias i R2;
i = 0;
while(i<16) do 
    perProcessTableEntry = (([PROCESS_TABLE + (1*16) + 11] + 1) * 512 ) - 16 + i;
    [perProcessTableEntry] = -1;
    i = i + 1;
endwhile;


//initialise disk map table
i = 0;
while(i < 10)do
    [DISK_MAP_TABLE+1*10+i] = -1;
    i = i + 1;
endwhile;
// code blocks
[DISK_MAP_TABLE+1*10+4] = 7;
[DISK_MAP_TABLE+1*10+5] = 8;


i = 2;
while(i < 16) do
    [PROCESS_TABLE + i * 16 + 4] = TERMINATED;
    i = i + 1;
endwhile;

return;


